//引用原生htpp模块
const http = require('http')
const fs = require('fs')
const path = require('path')
const qs = require('qs');
const formidable = require('formidable')
let app = {}
let callback = {}
let urlName = ''
let cors = false
let staticPath = ''
let currentType = ''
let file = false
let postPath = ''
module.exports = {
  //处理跨域
  cors () {
    cors = true
  },
  //开启服务器
  open (port) {
    // 开启服务器
    app = http.createServer()

      ; (async () => {
        try {
          // 监听端口
          await app.listen(port)
          console.log(`http服务已启动，监听${port}端口`);
        } catch (error) {
          // throw new Throw(error)
          console.log('该端口已被使用，请更换端口重新尝试');
        }
      })()
    app.on('request', (req, res) => {
      console.log(req.url);
      console.log(callback);
      if (cors === true) {
        console.log('处理跨域了');
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader("Access-Control-Allow-Headers", "X-Requested-With");
        res.setHeader("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");
      }
      console.log(path.join(staticPath + req.url));
      if (typeof callback[req.url]?.cal !== 'function') {
        fs.readFile(path.join(staticPath + req.url), (err, data) => {
          if (err) {
            fs.readFile(path.join(staticPath, '/404.html'), (err, data) => {
              res.statusCode = 404
              res.end(data)
            })
          } else {
            console.log('_________________');
            res.end(data)
          }


        })

      } else if (callback[req.url]?.method === 'get') {
        console.log('okokok');
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        callback[req.url].cal(req, res)
        console.log(staticPath + req.url);

      } else if (callback[req.url].method === 'post' && callback[req.url].file) {
        console.log(callback[req.url].path);
        fs.exists(callback[req.url].path, function (exists) {
          console.log(exists);
          // console.log(exists ? "创建成功" : "创建失败");
          if (exists) {
            //创建表单解析对象
            const form = new formidable.IncomingForm();
            //配置上传文件的目录 路径推荐写绝对路径
            form.uploadDir = path.join(__dirname, '../../', callback[req.url].path);
            //保留上传文件的后缀
            form.keepExtensions = true;
            form.encoding = 'utf-8'
            //解析表单
            form.parse(req, (err, fields, files) => {

              if (err) {
                fs.mkdirSyns(path.join(__dirname, '../../', callback[req.url].path))
              }

              //err错误对象 如果解析失败包含错误信息 解析成功nan
              // fields 存储普通请求参数 对象类型 {属性：值}  保存除了二进制文件外的其他表单数据
              // files 对象类型  存储上传的文件信息 
              console.log(fields);
              console.log(files.file.path);

              res.end(files.file.path);
            })
          }
        });
        res.writeHead(200, { 'content-type': 'text/plain;charset=UTF-8' });
        res.end('失败')

      } else if (callback[req.url].method === 'post' && !callback[req.url].file) {
        console.log('post请求');
        let postData = ''
        req.on('data', (chunk) => {
          postData += chunk

        })
        req.on('end', () => {
          console.log(postData);
          console.log("__________________");
          var dataObj = qs.parse(postData.toString(), true)
          console.log(dataObj);
          // res.end(JSON.stringify(dataObj))
          res.body = JSON.stringify(dataObj)
          callback[req.url].cal(req, res)
        })
      }
    })
    return this
  },


  //处理静态文件
  static (filePath) {
    staticPath = path.join(__dirname, '../../' + filePath)
  },
  do (cal) {
    callback[urlName] = {
      cal,
      method: currentType,
      file,
      path: postPath
    }
    return this
  },
  //处理get网络请求
  get (url) {
    //当客户端发送请求的时候
    urlName = url
    currentType = 'get'
    file = false,
      postPath = ''
    console.log('__________');
    return this
  },
  //处理post网络请求
  post (url, uploadPath) {
    //当客户端发送请求的时候
    let that = this
    urlName = url
    if (uploadPath) {
      fs.stat(uploadPath, function (exists) {
        // console.log(exists ? "创建成功" : "创建失败");
        if (exists) {
          fs.mkdirSync(uploadPath);
        }
      });
      method = 'post',
        file = true,
        postPath = uploadPath

    } else {
      method = 'post',
        file = false,
        postPath = ''
      return that
    }
  },

}

//引用原生htpp模块
const http = require('http')
const qs = require('qs');
const path = require('path')
const fs = require('fs')
const formidable = require('formidable')
const url = require('url')
const getMime = require('./getMime.js')
let status = 200
const send = function (data) {
  let resJSON = {
    data,
    status
  }
  this.end(JSON.stringify(resJSON))
}
//开启服务器
function open (port) {

  // 开启服务器
  app = http.createServer()
  app.listen(port)
  console.log(`已开启http服务，请访问${port}端口`);
  app.on('request', (req, res) => {
    var parseObj = url.parse(req.url, true);
    req.url = parseObj.pathname
    if (req.method === 'GET') {
      req.url = req.url + 'get'
    } else if (req.method === 'POST') {
      req.url = req.url + 'post'
    }
    
    if (cors === true) {
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader("Access-Control-Allow-Headers", "X-Requested-With");
      res.setHeader("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");
    }
    if (requestCallback[req.url] === undefined || typeof requestCallback[req.url].cal !== 'function') {
      let reg = /get$|post$/
      req.url = req.url.replace(reg, '')
      fs.readFile(path.join(staticPath, req.url), (err, data) => {
        let fileType = ''
        if (staticPath) {
          fileType = '.' + req.url.split('.')[req.url.split('.').length - 1]
        }

        if (err) {
          fs.readFile(path.join(__dirname, '../static/404.html'), (err, data) => {
            res.writeHead(404, { 'Content-Type': 'text/html;charset=UTF-8' })
            res.end(data)
          })
          return
        } else {
          res.writeHead(200, { 'Content-Type': getMime(fileType) ? getMime(fileType) : 'text/plain;charset=UTF-8' });
          res.end(data)
        }
      })
      //get请求处理
    } else if (requestCallback[req.url].path === req.url
      && requestCallback[req.url].method === req.method.toLowerCase()
      && requestCallback[req.url].method === 'get'
    ) {
      req.body = parseObj.query
      res.writeHead(200, { 'Content-Type': 'text/json;charset=UTF-8' });
      status = 200
      res.send = send.bind(res)

      requestCallback[req.url].cal(req, res)
      //处理post 二进制文件
    } else if (requestCallback[req.url].path === req.url
      && requestCallback[req.url].method === req.method.toLowerCase()
      && requestCallback[req.url].method === 'post'
      && requestCallback[req.url].file === true) {

      res.send = send.bind(res)
      let uploadPath = path.join(__dirname, '../../../' + requestCallback[req.url].postPath)
      fs.exists(uploadPath, async function (exists) {
        if (!exists) {
          await fs.mkdirSync(uploadPath);
          callback()
        } else {
          callback()
        }
      });
      function callback () {
        let filesArr = []
        //创建表单解析对象
        const form = new formidable.IncomingForm();
        if (form.type !== 'multipart') {
          res.writeHead(404, { 'Content-Type': 'text/json;charset=UTF-8' });
          status = 404
          res.send('请设置Content-Type为multipart/form-data')
          return
        }
        //配置上传文件的目录 路径推荐写绝对路径
        form.uploadDir = uploadPath;
        //保留上传文件的后缀
        form.keepExtensions = true;
        form.on('file', function (filed, file) {
          filesArr.push(file)
        })

        //解析表单
        form.parse(req, (err, fields, files) => {
          //err错误对象 如果解析失败包含错误信息 解析成功nan
          // fields 存储普通请求参数 对象类型 {属性：值}  保存除了二进制文件外的其他表单数据
          // files 对象类型  存储上传的文件信息 

          let fileUrl = []
          if (filesArr.length === 1) {
            filesArr[0].path = req.headers.origin.split('://')[0] + '://' + req.headers.host + '/' + filesArr[0].path.split('\\')[filesArr[0].path.split('\\').length - 1]
            req.file = filesArr[0]
          } else {
            filesArr.forEach((item) => {
              item.path = req.headers.origin.split('://')[0] + '://' + req.headers.host + '/' + item.path.split('\\')[item.path.split('\\').length - 1]
            })
            req.file = filesArr
          }
          res.writeHead(200, { 'Content-Type': 'text/json;charset=UTF-8' });
          status = 200
          requestCallback[req.url].cal(req, res)
        })
      }
      //post请求处理(表单)
    } else if (requestCallback[req.url].path === req.url
      && requestCallback[req.url].method === req.method.toLowerCase()
      && requestCallback[req.url].method === 'post'
      && requestCallback[req.url].file === false) {

      let postData = ''
      req.on('data', (chunk) => {
        postData += chunk
      })
      req.on('end', () => {
        var dataObj = qs.parse(postData.toString(), true)
        req.body = dataObj
        res.writeHead(200, { 'Content-Type': 'text/json;charset=UTF-8' });
        status = 200
        res.send = send.bind(res)
        requestCallback[req.url].cal(req, res)
      })
    } else {
      res.writeHead(404, { 'Content-Type': 'text/html;charset=UTF-8' })
      fs.readFile(path.join(__dirname, '../static/404.html'), (err, data) => {
        res.end(data)
      })
    }
  })
  return this
}

module.exports = open

